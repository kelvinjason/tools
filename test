import org.apache.pdfbox.cos.COSName;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.PDPage;
import org.apache.pdfbox.pdmodel.PDPageContentStream;
import org.apache.pdfbox.pdmodel.font.PDType1Font;
import org.apache.pdfbox.text.PDFTextStripper;
import org.apache.pdfbox.text.TextPosition;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class PDFPlaceholderReplacer {

    public static void main(String[] args) {
        String templatePath = "path/to/your/template.pdf";
        String outputPath = "path/to/output/filled.pdf";

        try (PDDocument document = PDDocument.load(new File(templatePath))) {
            PlaceholderPDFTextStripper stripper = new PlaceholderPDFTextStripper("<name>", "kelvin");
            stripper.setSortByPosition(true);

            // 遍历每一页并处理占位符
            for (PDPage page : document.getPages()) {
                stripper.setStartPage(document.getPages().indexOf(page) + 1);
                stripper.setEndPage(document.getPages().indexOf(page) + 1);
                stripper.replaceText(document, page);
            }

            document.save(outputPath);
            System.out.println("PDF placeholders replaced and saved successfully.");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    static class PlaceholderPDFTextStripper extends PDFTextStripper {

        private final String placeholder;
        private final String replacement;

        public PlaceholderPDFTextStripper(String placeholder, String replacement) throws IOException {
            this.placeholder = placeholder;
            this.replacement = replacement;
        }

        public void replaceText(PDDocument document, PDPage page) throws IOException {
            this.setSortByPosition(true);
            this.setStartPage(document.getPages().indexOf(page) + 1);
            this.setEndPage(document.getPages().indexOf(page) + 1);

            List<TextPosition> textPositions = new ArrayList<>();
            String content = this.getText(document);

            // 收集文本位置
            if (content.contains(placeholder)) {
                this.stripPage(document, page, textPositions);

                // 清空页面内容
                page.getCOSObject().setItem(COSName.CONTENTS, null);

                try (PDPageContentStream contentStream = new PDPageContentStream(document, page)) {
                    contentStream.setFont(PDType1Font.HELVETICA, 12);
                    contentStream.beginText();

                    // 替换并写入文本
                    for (TextPosition textPosition : textPositions) {
                        String text = textPosition.getUnicode();
                        if (text.contains(placeholder)) {
                            text = text.replace(placeholder, replacement);
                        }
                        contentStream.newLineAtOffset(textPosition.getXDirAdj(), textPosition.getYDirAdj());
                        contentStream.showText(text);
                    }

                    contentStream.endText();
                }
            }
        }

        private void stripPage(PDDocument document, PDPage page, List<TextPosition> textPositions) throws IOException {
            this.setStartPage(document.getPages().indexOf(page) + 1);
            this.setEndPage(document.getPages().indexOf(page) + 1);
            this.setTextPositions(textPositions);
            this.writeText(document, null);
        }

        private void setTextPositions(List<TextPosition> textPositions) {
            this.textPositions = textPositions;
        }

        private List<TextPosition> textPositions;

        @Override
        protected void writeString(String string, List<TextPosition> textPositions) {
            this.textPositions.addAll(textPositions);
        }
    }
}
